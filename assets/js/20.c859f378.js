(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{404:function(t,s,a){"use strict";a.r(s);var n=a(54),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),a("h2",{attrs:{id:"_1-1-类型分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-类型分类"}},[t._v("#")]),t._v(" 1.1 类型分类")]),t._v(" "),a("ul",[a("li",[t._v("基本类型：undefined,null,booeal,string,number,symbol(es6中新增)")]),t._v(" "),a("li",[t._v("引用类型：object"),a("br"),t._v(" "),a("code",[t._v("undefined")]),t._v("是已在作用域中声明，但是还没有赋值的变量"),a("br"),t._v(" "),a("code",[t._v("null")]),t._v("指曾赋过值，但是目前没有值，指空值"),a("br"),t._v("\njavascript 为基本数据类型提供了封装对象，成为原生函数，如（String，Number，Boolean等），它们为基本数据类型值提供了该子类型所特有的方法和属性，如（String#trim()）"),a("br"),t._v("\n基本类型：存放在栈内存中的简单数值，直接按值存放，可以直接访问"),a("br"),t._v("\n引用类型：存放在堆内存中的对象，当我们要访问引用类型的数值时，首先从栈中获取该对象的地址指针，然后再从堆内存中取得所需要的数据")])]),t._v(" "),a("h2",{attrs:{id:"_1-2-类型判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-类型判断"}},[t._v("#")]),t._v(" 1.2 类型判断")]),t._v(" "),a("ul",[a("li",[t._v("typeof：需要注意这两个，typeof null 返回'object'；typeof [] 也返回'object'")]),t._v(" "),a("li",[t._v("instanceof：原理是根据原型链，详细可看2.4节")]),t._v(" "),a("li",[t._v("Object.prototype.toString.call(null) // 返回值：'[object Null]'")])]),t._v(" "),a("p",[t._v("加餐：")]),t._v(" "),a("ol",[a("li",[t._v("判断一个值是否是数组的几种方法")])]),t._v(" "),a("ul",[a("li",[t._v("Array.isArray()")]),t._v(" "),a("li",[t._v("Object.prototype.toString.call()")]),t._v(" "),a("li",[t._v("instanceof")]),t._v(" "),a("li",[t._v("constructor")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("整数检测："),a("code",[t._v("Number.isInteger(42)")]),t._v(" // true")]),t._v(" "),a("li",[t._v("NaN指‘不是一个数字’，是一个特殊的值，它和自身不相等。使用"),a("code",[t._v("Number.isNaN()")]),t._v("可以判断是否为NaN")]),t._v(" "),a("li",[t._v("NaN === NaN // false\nNaN != NaN //true"),a("br"),t._v("\n可以使用"),a("code",[t._v("Object.is()")]),t._v("来判断两个值是否绝对相等")])]),t._v(" "),a("h2",{attrs:{id:"_1-3-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-类型转换"}},[t._v("#")]),t._v(" 1.3 类型转换")]),t._v(" "),a("h3",{attrs:{id:"_1-3-1-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-tostring"}},[t._v("#")]),t._v(" 1.3.1 toString")]),t._v(" "),a("p",[t._v("对象：对象的toString返回内部属性"),a("code",[t._v("[[class]]")]),t._v("的值"),a("br"),t._v("\n数组：将所有的单元字符串化后用"),a("code",[t._v(",")]),t._v("连接"),a("br"),t._v("\n数字：字符串化"),a("br"),t._v("\nundefined：undefined"),a("br"),t._v("\nnull:null"),a("br"),t._v("\nfalse:false")]),t._v(" "),a("h3",{attrs:{id:"_1-3-2-tonumber"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-tonumber"}},[t._v("#")]),t._v(" 1.3.2 toNumber")]),t._v(" "),a("p",[t._v("true转化为1，false转化为0，undefined转化为NaN，null转化为0"),a("br"),t._v("\n对象（包括数组）会首先转换为响应的基本类型（toPrimitive）(先检查该值是否有valueOf()方法，如果有并且返回的是基本类型值，就使用该值进行强制类型转换，如果没有就使用toString()方法，如果都不返回基本类型值，就会产生TypeError错误)，如果返回的是非数字的基本类型，再遵循上面规则将其强制转换为数字"),a("br"),t._v("\n例题1：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'22'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'22'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//22")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//22")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//22")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n")])])]),a("p",[t._v("例题2：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false,[]调用toString得到''空字符串，然后空字符串转为数字类型为0，{}调用toString返回内部属性`[[class]]`即[['object object']] ，得到[]+{} ==== '[object Object]'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true, {}被当作一个独立的代码块（不执行任何操作）[]被抓换成0，0==false")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-3-3-toboolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-toboolean"}},[t._v("#")]),t._v(" 1.3.3 toBoolean")]),t._v(" "),a("p",[t._v("假值：\nundefined,null,false,+0,-0,NaN,''转换为布尔类型时都是false")]),t._v(" "),a("h2",{attrs:{id:"_1-4-和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-和"}},[t._v("#")]),t._v(" 1.4 ==和===")]),t._v(" "),a("p",[t._v("==允许在相等比较中进行强制类型转换，而===不允许；==和===都会检查操作数的类型，区别在于操作类型不同时他们的处理方式不同"),a("br"),t._v("\n两个值在进行宽松相等（==）比较时规则：")]),t._v(" "),a("ul",[a("li",[t._v("undefined和null相等")]),t._v(" "),a("li",[t._v("字符串和bool都转换为数字")]),t._v(" "),a("li",[t._v("对象返回toPrimitive操作，详细看1.3.2"),a("br"),t._v("\n例题：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false 类型一样就不用进行类型转换了，两值不等所以false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false 因为两个[]是引用类型数据，虽然都是数组，但是不是同一个数组，所以是false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true，空数组不是假值，转为Bool时是true， ![] 会进行强制类型转换，![]转为false；然后[]转为'',再转为0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false 同理，和两个数组比较一样")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会报错，Unexpected token '=='；当{}在代码开头时，会解析成一个代码块。当const a = {} 判断a == [] 返回的是false")]),t._v("\n")])])]),a("p",[t._v("在进行不同类型比较时，最后是转为数字进行比较的")]),t._v(" "),a("h2",{attrs:{id:"加餐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加餐"}},[t._v("#")]),t._v(" 加餐")]),t._v(" "),a("p",[t._v("（1）问： 为什么"),a("code",[t._v("2.toString()")]),t._v("，"),a("code",[t._v("42.toFixed(2)")]),t._v("会报错而"),a("code",[t._v("let a = 2;a.toString();a.toFixed(2)")]),t._v("不会报错"),a("br"),t._v("\n答：因为"),a("code",[t._v(".")]),t._v("是一个有效的数字字符，会被优先识别为数字字面量的一部分，然后才是对对象的属性访问运算符。"),a("br"),t._v("\n（2）问："),a("code",[t._v("0.1+0.2")]),t._v("值为多少，"),a("code",[t._v("0.23*10")]),t._v("值为多少"),a("br"),t._v("\n答：二进制浮点数中的0.1和0.2并不是十分精确"),a("br"),t._v(" "),a("code",[t._v("0.23*10 === 2.3000000000000003")]),t._v("；"),a("code",[t._v("0.1+0.2 === 0.30000000000000004")])])])}),[],!1,null,null,null);s.default=e.exports}}]);