(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{408:function(t,s,a){"use strict";a.r(s);var n=a(54),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("h2",{attrs:{id:"_4-1-作用域是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-作用域是什么"}},[t._v("#")]),t._v(" 4.1 作用域是什么")]),t._v(" "),a("p",[t._v("几乎所有的编程语言都可以储存变量中的值，并且能够在之后对这个值进行访问或修改。"),a("br"),t._v("\n我们需要一套设计良好的规则来储存变量，并且之后可以方便的找到这些变量，这套规则被称为作用域")]),t._v(" "),a("h2",{attrs:{id:"_4-2-理解作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-理解作用域"}},[t._v("#")]),t._v(" 4.2 理解作用域")]),t._v(" "),a("ul",[a("li",[t._v("引擎：从头到尾负责整个Javascript程序的编译及执行过程")]),t._v(" "),a("li",[t._v("编译器：引擎的好朋友之一，负责语法分析及代码生成等脏活累活。")]),t._v(" "),a("li",[t._v("作用域：负责收集并维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。")])]),t._v(" "),a("p",[t._v("问题：分析"),a("code",[t._v("var a = 2")]),a("br"),t._v("\n答：在当前作用域下声明变量"),a("code",[t._v("a")]),t._v("（如果之前没声明过），然后在作用域中查找"),a("code",[t._v("a")]),t._v("，并给它赋值为"),a("code",[t._v("2")]),a("br"),t._v("\n详细分析：")]),t._v(" "),a("ol",[a("li",[t._v("遇到"),a("code",[t._v("var a")]),t._v(",编译器会询问作用域是否已经有一个该名称的变量存在于同一个作用域的集合中，如果是，编译器会忽略该声明，继续进行编译，否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为"),a("code",[t._v("a")])]),t._v(" "),a("li",[t._v("接下来编译器会为引擎生成运行时所需要的代码，这些代码被用来处理"),a("code",[t._v("a=2")]),t._v("这个赋值操作。引擎运行时会首先询问作用域，在当前的作用域中是否存在一个叫做"),a("code",[t._v("a")]),t._v("的变量，如果有，引擎就使用这个变量，如果没有就会继续向上查找该变量。如果引擎找到了，就会将"),a("code",[t._v("2")]),t._v("赋值给它，否则抛出一个异常。")])]),t._v(" "),a("h2",{attrs:{id:"_4-3-欺骗词法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-欺骗词法"}},[t._v("#")]),t._v(" 4.3 欺骗词法")]),t._v(" "),a("p",[t._v("词法作用域是完全由代码期间，"),a("strong",[t._v("函数所声明的位置来定义")]),t._v(".但是特殊情况下也能在运行时来修改，也就是欺骗词法")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("eval")]),a("br"),t._v("\neval(...)函数可以接受一个字符串为参数，并将其中的内容视为好像在书写时就存在于程序中的这个位置"),a("br"),t._v("\n例题：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var b = 3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("eval 在foo内部创建了一个变量b，并遮蔽了外部的作用域中的同名变量。"),a("br"),t._v("\n2. "),a("strong",[t._v("with")])]),t._v(" "),a("h2",{attrs:{id:"_4-4-作用域分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-作用域分类"}},[t._v("#")]),t._v(" 4.4 作用域分类")]),t._v(" "),a("ol",[a("li",[t._v("全局作用域")]),t._v(" "),a("li",[t._v("函数作用域")]),t._v(" "),a("li",[t._v("块级作用域")])]),t._v(" "),a("h2",{attrs:{id:"_4-5-变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-变量提升"}},[t._v("#")]),t._v(" 4.5 变量提升")]),t._v(" "),a("p",[t._v("所有的声明（变量和函数）都会被移动到各自的作用域的最顶端，这个过程称为提升。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量提升")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量提升")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("只有声明本身会被提升，而赋值操作或其它运行逻辑会留在原地（赋值）"),a("br"),t._v("\n函数声明和变量声明都会被提升，但是函数提升优于变量提升，在代码中，函数会首先被提升，然后才是变量。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 // 函数提升先于变量提升")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("后出现的函数声明会覆盖前面的")]),t._v(" "),a("p",[t._v("参考：《你不知道的JavaScript》上册")])])}),[],!1,null,null,null);s.default=r.exports}}]);